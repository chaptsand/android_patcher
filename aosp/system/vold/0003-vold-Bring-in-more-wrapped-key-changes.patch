From e17afa2db76d6dfd3b3cf66100a573e1a7a69314 Mon Sep 17 00:00:00 2001
From: Pig <pig.priv@gmail.com>
Date: Fri, 25 Sep 2020 22:56:33 +0800
Subject: [PATCH 3/3] vold: Bring in more wrapped key changes

Conflicts:
	KeyStorage.cpp
	KeyUtil.cpp

[wight554: Apply changes from CAF 12]

Change-Id: I44e81afaec78c567a0bf2eed30a79eb737e2a867
Signed-off-by: Volodymyr Zhdanov <wight554@gmail.com>
---
 FsCrypt.cpp    | 4 ++++
 KeyStorage.cpp | 8 ++++++++
 KeyUtil.cpp    | 9 ++++++++-
 3 files changed, 20 insertions(+), 1 deletion(-)

diff --git a/FsCrypt.cpp b/FsCrypt.cpp
index 4f94a4c..85ffefd 100644
--- a/FsCrypt.cpp
+++ b/FsCrypt.cpp
@@ -253,6 +253,10 @@ static bool get_data_file_encryption_options(EncryptionOptions* options) {
                       "this flag from the device's fstab";
         return false;
     }
+    if (options->version == 1) {
+        options->use_hw_wrapped_key =
+            GetEntryForMountPoint(&fstab_default, DATA_MNT_POINT)->fs_mgr_flags.wrapped_key;
+    }
     return true;
 }
 
diff --git a/KeyStorage.cpp b/KeyStorage.cpp
index b4abc27..74bfc72 100644
--- a/KeyStorage.cpp
+++ b/KeyStorage.cpp
@@ -68,6 +68,8 @@ static const char* kFn_secdiscardable = "secdiscardable";
 static const char* kFn_stretching = "stretching";
 static const char* kFn_version = "version";
 
+static const int32_t KM_TAG_FBE_ICE = static_cast<int32_t>(7 << 28) | 16201;
+
 namespace {
 
 // Storage binding info for ensuring key encryption keys include a
@@ -143,6 +145,12 @@ bool generateWrappedStorageKey(KeyBuffer* key) {
     auto paramBuilder = km::AuthorizationSetBuilder().AesEncryptionKey(AES_KEY_BYTES * 8);
     paramBuilder.Authorization(km::TAG_STORAGE_KEY);
     if (!keystore.generateKey(paramBuilder, &key_temp)) return false;
+
+    km::KeyParameter param1;
+    param1.tag = (km::Tag) (KM_TAG_FBE_ICE);
+    param1.value = km::KeyParameterValue::make<km::KeyParameterValue::boolValue>(true);
+    paramBuilder.push_back(param1);
+
     *key = KeyBuffer(key_temp.size());
     memcpy(reinterpret_cast<void*>(key->data()), key_temp.c_str(), key->size());
     return true;
diff --git a/KeyUtil.cpp b/KeyUtil.cpp
index 25d5af3..4a02ec5 100644
--- a/KeyUtil.cpp
+++ b/KeyUtil.cpp
@@ -279,7 +279,14 @@ bool installKey(const std::string& mountpoint, const EncryptionOptions& options,
             // A key for a v1 policy is specified by an arbitrary 8-byte
             // "descriptor", which must be provided by userspace.  We use the
             // first 8 bytes from the double SHA-512 of the key itself.
-            policy->key_raw_ref = generateKeyRef((const uint8_t*)key.data(), key.size());
+            if (options.use_hw_wrapped_key) {
+                /* When wrapped key is supported, only the first 32 bytes are
+                   the same per boot. The second 32 bytes can change as the ephemeral
+                   key is different. */
+                policy->key_raw_ref = generateKeyRef((const uint8_t*)key.data(), key.size()/2);
+            } else {
+                policy->key_raw_ref = generateKeyRef((const uint8_t*)key.data(), key.size());
+            }
             if (!isFsKeyringSupported()) {
                 return installKeyLegacy(key, policy->key_raw_ref);
             }
-- 
2.30.2

